<?xml version="1.0" encoding="utf-8"?>
<Project>
	<PropertyGroup>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>

		<Company>Truinto</Company>
		<Authors>Truinto</Authors>
		<Copyright>Copyright Â© Truinto 2025</Copyright>
		<Title>$(MSBuildProjectName)</Title>
		<RepositoryUrl>https://github.com/Truinto/</RepositoryUrl>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>

		<ILRepackTargetsFile>$(MSBuildThisFileDirectory)ILRepack.targets</ILRepackTargetsFile>
		<DoILRepack>false</DoILRepack>

		<DebugType>full</DebugType>
		<DebugSymbols>true</DebugSymbols>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<AccelerateBuildsInVisualStudio>false</AccelerateBuildsInVisualStudio>
		<!--<GenerateDocumentationFile>true</GenerateDocumentationFile>-->
		<!--<Optimize>false</Optimize>-->

		<SharedDir>$(MSBuildThisFileDirectory)</SharedDir>
		<Tools>$(MSBuildThisFileDirectory)../Tools/</Tools>
		<Tools Condition="!Exists('$(Tools)')">$(MSBuildThisFileDirectory)../../Tools/</Tools>
	</PropertyGroup>

	<ItemDefinitionGroup>
		<!--<Reference Private="false" />-->
		<!--<ProjectReference Private="false" />-->
	</ItemDefinitionGroup>

	<ItemGroup>
		<PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.*" ExcludeAssets="runtime" PrivateAssets="all" />
		<PackageReference Include="BuildTaskVersionControl" Version="1.*" ExcludeAssets="runtime" />
		<PackageReference Include="ILRepack.Lib.MSBuild.Task" Version="2.0.*" ExcludeAssets="runtime" />
	</ItemGroup>

	<Target Name="TargetDefineConstants" AfterTargets="ResolveProjectReferences">
		<PropertyGroup>
			<DefineConstants Condition="'$(UseWindowsForms)'=='true'">$(DefineConstants);WINFORMS</DefineConstants>
		</PropertyGroup>
	</Target>



	<!-- Copy this ItemGroup into your project.
		 Note: ItemGroup inside a Target is applied only after the Target is finished. 
		 Do not set ItemGroup and CallTarget in the same Target. -->
	<ItemGroup Condition="false">
		<VersioningTask_In Include="$(MSBuildThisFileFullPath)" />
		<VersioningTask_In Include="changelog.md" />
		<VersioningTask_Out DropRevision="never" Include="$(MSBuildThisFileFullPath)" />
		<VersioningTask_Out DropRevision="keep" Include="info.json" />
		<VersioningTask_Out DropRevision="keep" Include="Settings/Repository.json" Max="2" />
		
		<TargetMergeItems Include="$(SolutionDir)/@Shared/UnityMod.dll" />
		
		<TargetCopyTarget Include="$(ModFolder)/$(TargetName)/" />
		<TargetCopyDelete Include="$(ModFolder)/$(TargetName)/$(TargetName).pdb" Condition="$(Configuration.Contains('Release'))" />
		<TargetCopyDelete Include="$(ModFolder)/$(TargetName)/$(TargetName).xml" Condition="$(Configuration.Contains('Release'))" />
		
		<TargetZipItems Include="$(ModFolder)/$(TargetName)/$(TargetName).dll" />
		<TargetZipTarget Include="$(SolutionDir)/publish/$(TargetName).zip" />
	</ItemGroup>

	<!-- Target to merge given assemblies into primary assembly. Overwrites primary assembly.
		 required: @TargetMergeItems: files to copy
		 optional: @SourceDirs: parsed from project references
		 output:   @SourceDirs -->
	<Target Name="TargetMerge" AfterTargets="PostBuildEvent">
		<CallTarget Targets="TargetMergeA" Condition="'@(TargetMergeItems)'!=''" />
	</Target>

	<Target Name="TargetMergeA">
		<ItemGroup>
			<SourceDirsA Include="@(SourceDirs)" />
			<SourceDirsA Condition="'%(Reference.HintPath)'!=''" Include="$([MSBuild]::NormalizePath('%(Reference.HintPath)/../'))" />
			<SourceDirs Remove="%(SourceDirs.Identity)" />
			<SourceDirs Include="@(SourceDirsA->Distinct())" />

			<TargetMergeItemsA Include="$(TargetDir)$(TargetName).dll" />
			<TargetMergeItemsA Include="@(TargetMergeItems)" />
			<TargetMergeItems Remove="%(TargetMergeItems.Identity)" />
			<TargetMergeItems Include="@(TargetMergeItemsA->Distinct())" />
		</ItemGroup>
		<Message Condition="'%(Reference.HintPath)'!=''" Text="%(Reference.Identity) %09%09 $([System.IO.Path]::GetFullPath('%(Reference.HintPath)'))" Importance="Low" />
		<Message Text="Merging assemblies..." Importance="Low" />
		<Message Text="%09%(TargetMergeItems.Identity)" Importance="Low" />
		<Message Text="%09with libs=@(SourceDirs)" Importance="Low" />
		<ILRepack XmlDocumentation="true" Union="true" DebugInfo="true" LibraryPath="@(SourceDirs)" InputAssemblies="@(TargetMergeItems)" OutputFile="$(TargetDir)$(TargetName).dll" />
	</Target>

	<!-- Generates mono debug binary. -->
	<Target Name="TargetMDB" AfterTargets="TargetMerge" DependsOnTargets="TargetMerge">
		<CallTarget Targets="TargetMDBA" Condition="$(DebugSymbols) And '$(DebugType)'=='full' And Exists('$(Tools)pdb2mdb.exe') And '%(Reference.Identity)'=='UnityEngine'" />
	</Target>

	<Target Name="TargetMDBA">
		<Message Text="Generating mdb file." Importance="High" />
		<Exec Command="&quot;$(Tools)pdb2mdb.exe&quot; &quot;$(TargetDir)$(TargetName).dll&quot;"/>
	</Target>

	<!-- Copies files to target folder.
		 required: @TargetCopyTarget: where to copy files
		 optional: @TargetCopyItems: files to copy; if empty read all build files
		 optional: @TargetCopyDelete: files to delete after copy -->
	<Target Name="TargetCopy" AfterTargets="TargetMDB" DependsOnTargets="TargetMDB">
		<CallTarget Targets="TargetCopyA" Condition="'$(TargetCopyTarget)'!='' Or '@(TargetCopyTarget)'!=''" />
	</Target>

	<Target Name="TargetCopyA">
		<ItemGroup>
			<TargetCopyItems Condition="'@(TargetCopyItems)'==''" Include="$(TargetDir)/**" />
		</ItemGroup>
		<PropertyGroup>
			<TargetCopyTarget Condition="'@(TargetCopyTarget)'!=''">%(TargetCopyTarget.Identity)</TargetCopyTarget>
			<TargetCopyTarget>$([MSBuild]::NormalizePath('$(TargetCopyTarget)'))</TargetCopyTarget>
		</PropertyGroup>
		<Message Text="Copy @(TargetCopyItems) -> $(TargetCopyTarget)" Importance="High" />
		<Copy SourceFiles="@(TargetCopyItems)" DestinationFolder="$(TargetCopyTarget)/%(RecursiveDir)" UseHardlinksIfPossible="true" />
		<Delete Files="@(TargetCopyDelete)" TreatErrorsAsWarnings="true" />
	</Target>

	<!-- Zips files. Set either @TargetZipItems or @TargetZipTarget.
		 optional: @TargetZipItems: files to zip; if empty reads TargetCopyTarget/* or TargetZipTarget/* instead
		 optional: @TargetZipTarget: zip save path; if empty save next to first @TargetZipItems
		 optional: $TargetZipWorkDir: working directory; if empty goes one folders up from first @TargetZipItems -->
	<Target Name="TargetZip" AfterTargets="TargetCopy" DependsOnTargets="TargetCopy">
		<CallTarget Targets="TargetZipA" Condition="$(Configuration.Contains('Release')) And ('@(TargetZipItems)'!='' Or '@(TargetZipTarget)'!='' Or '$(TargetZipTarget)'!='')" />
	</Target>

	<Target Name="TargetZipA">
		<PropertyGroup>
			<TargetZipTarget Condition="'@(TargetZipTarget)'!=''">%(TargetZipTarget.Identity)</TargetZipTarget>
			<TargetZipWorkDir Condition="'@(TargetZipWorkDir)'!=''">%(TargetZipWorkDir.Identity)</TargetZipWorkDir>
		</PropertyGroup>
		<ItemGroup>
			<TargetZipItems Condition="'@(TargetZipItems)'=='' And '$(TargetCopyTarget)'!=''" Include="$(TargetCopyTarget)/**" />
			<TargetZipItems Condition="'@(TargetZipItems)'=='' And '$(TargetZipTarget)'!=''" Include="$(TargetZipTarget)/**" />
			<TargetZipItems Condition="'%(Extension)'=='.zip'" Remove="%(TargetZipItems.Identity)" />
			<TargetZipItemsB Include="@(TargetZipItems->Reverse())" />
		</ItemGroup>
		<PropertyGroup>
			<TargetZipTarget Condition="'$(TargetZipTarget)'==''">%(TargetZipItemsB.Identity)/../$(TargetName).zip</TargetZipTarget>
			<TargetZipTarget>$([MSBuild]::NormalizePath('$(TargetZipTarget)'))</TargetZipTarget>			
			<TargetZipWorkDir Condition="'$(TargetZipWorkDir)'==''">%(TargetZipItemsB.Identity)/../</TargetZipWorkDir>
			<TargetZipWorkDir>$([MSBuild]::NormalizePath('$(TargetZipWorkDir)'))</TargetZipWorkDir>
		</PropertyGroup>
		<Message Text="Zip w=$(TargetZipWorkDir) -> @(TargetZipItems) -> $(TargetZipTarget)" Importance="Low" />
		<ZipTask ZipFileName="$(TargetZipTarget)" WorkingDirectory="$(TargetZipWorkDir)" Files="@(TargetZipItems)" />
	</Target>

	<!-- Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(Configuration), '^.*_Bep$' ))" -->

</Project>
